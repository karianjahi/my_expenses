head(adf)
clip = sqrt(adf$CSLIP1 + adf$CSLIP2) ** 2)
clip = sqrt((adf$CSLIP1 + adf$CSLIP2) ** 2)
cslip = sqrt((adf$CSLIP1 + adf$CSLIP2) ** 2)
cslip
cslip = sqrt(adf$CSLIP1 ** 2 + adf$CSLIP2 ** 2)
cslip
cslip = atan(adf$CSLIP1, adf$CSLIP2)
cslip = atan(adf$CSLIP1/adf$CSLIP2)
cslip
summary(cslip)
cslip = atan(adf$CSLIP2/adf$CSLIP1)
cslip
summary(cslip)
slip_angle = ifelse(is.nan(slip_angle), 0, slip_angle)
slip_angle = atan(adf$CSLIP2/adf$CSLIP1)
slip_angle = ifelse(is.nan(slip_angle), 0, slip_angle)
slip_angle
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
slip_angle
adf$slip = slip_angle
fe_model_files = dir("/home/karianjahi/FE_MODEL", pattern = "odb.txt", full.names = TRUE)
Dat = lapply(fe_model_files, function(x) read.delim(x, header = TRUE, sep = ","))
RubberLoss = function(cslip, cpres, cspeed) 6.87 +
0.61*((cslip-3.00)/0.58) +
2.91*((cpres-4.43)/0.95) +
-0.34*((cspeed-9.82)/3.19)
for(iFe in seq_along(fe_model_files)){
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP2/adf$CSLIP1)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slip = slip_angle
Dat[[iFe]] = adf
}
Dat
Dat[[1]][1:5, ]
RubberLoss
adf$slipAngle = slip_angle
adf$rubber_loss = RubberLoss(adf$slipAngle, adf$CPRESS, adf$CSLIP1)
adf[1:10, ]
adf$rubber_loss[adf$rubber_loss > 0]
range(adf$rubber_loss[adf$rubber_loss > 0])
range(adf$rubber_loss[adf$rubber_loss < 0])
sum(adf$rubber_loss)
sum(abs(adf$rubber_loss))
Dat = lapply(fe_model_files, function(x) read.delim(x, header = TRUE, sep = ","))
Dat[[1]][1:10, ]
adf
fe_model_files
fe_new_files = gsub(".odb.txt", "_newfiles.txt", fe_model_files)
fe_new_files
fe_new_files = gsub(".odb.txt", "rubber_loss.csv", fe_model_files)
fe_new_files
fe_new_files
fe_model_files = dir("/home/karianjahi/FE_MODEL", pattern = "odb.txt", full.names = TRUE)
fe_new_files = gsub(".odb.txt", "_rubber_loss.csv", fe_model_files)
Dat = lapply(fe_model_files, function(x) read.delim(x, header = TRUE, sep = ","))
RubberLoss = function(cslip, cpres, cspeed) 6.87 +
0.61*((cslip-3.00)/0.58) +
2.91*((cpres-4.43)/0.95) +
-0.34*((cspeed-9.82)/3.19)
for(iFe in seq_along(fe_model_files)){
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP2/adf$CSLIP1)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
adf$rubber_loss = RubberLoss(adf$slipAngle, adf$CPRESS, adf$CSLIP1)
write(adf, fe_new_files[iFe], sep = ",", row.names = FALSE, colnames = TRUE)
}
fe_model_files = dir("/home/karianjahi/FE_MODEL", pattern = "odb.txt", full.names = TRUE)
fe_new_files = gsub(".odb.txt", "_rubber_loss.csv", fe_model_files)
Dat = lapply(fe_model_files, function(x) read.delim(x, header = TRUE, sep = ","))
RubberLoss = function(cslip, cpres, cspeed) 6.87 +
0.61*((cslip-3.00)/0.58) +
2.91*((cpres-4.43)/0.95) +
-0.34*((cspeed-9.82)/3.19)
for(iFe in seq_along(fe_model_files)){
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP2/adf$CSLIP1)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
adf$rubber_loss = RubberLoss(adf$slipAngle, adf$CPRESS, adf$CSLIP1)
write(adf, fe_new_files[iFe], sep = ",", row.names = FALSE, col.names = TRUE)
}
fe_model_files = dir("/home/karianjahi/FE_MODEL", pattern = "odb.txt", full.names = TRUE)
fe_new_files = gsub(".odb.txt", "_rubber_loss.csv", fe_model_files)
Dat = lapply(fe_model_files, function(x) read.delim(x, header = TRUE, sep = ","))
RubberLoss = function(cslip, cpres, cspeed) 6.87 +
0.61*((cslip-3.00)/0.58) +
2.91*((cpres-4.43)/0.95) +
-0.34*((cspeed-9.82)/3.19)
for(iFe in seq_along(fe_model_files)){
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP2/adf$CSLIP1)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
adf$rubber_loss = RubberLoss(adf$slipAngle, adf$CPRESS, adf$CSLIP1)
write.table(adf, fe_new_files[iFe], sep = ",", row.names = FALSE, col.names = TRUE)
}
fe_model_files = dir("/home/karianjahi/FE_MODEL", pattern = "odb.txt", full.names = TRUE)
fe_new_files = gsub(".odb.txt", "_rubber_loss.csv", fe_model_files)
Dat = lapply(fe_model_files, function(x) read.delim(x, header = TRUE, sep = ","))
RubberLoss = function(cslip, cpres, cspeed) 6.87 +
0.61*((cslip-3.00)/0.58) +
2.91*((cpres-4.43)/0.95) +
-0.34*((cspeed-9.82)/3.19)
for(iFe in seq_along(fe_model_files)){
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP2/adf$CSLIP1)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
adf$rubber_loss = RubberLoss(adf$slipAngle, adf$CPRESS, adf$CSLIP1)
write.table(adf, fe_new_files[iFe], sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
}
Dat[[1]]
fe_model_files = dir("/home/karianjahi/FE_MODEL", pattern = "odb.txt", full.names = TRUE)
fe_new_files = gsub(".odb.txt", "_rubber_loss.csv", fe_model_files)
Dat = lapply(fe_model_files, function(x) read.delim(x, header = TRUE, sep = ","))
RubberLoss = function(cslip, cpres, cspeed) 6.87 +
0.61*((cslip-3.00)/0.58) +
2.91*((cpres-4.43)/0.95) +
-0.34*((cspeed-9.82)/3.19)
rubbertotal = NULL
for(iFe in seq_along(fe_model_files)){
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP2/adf$CSLIP1)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
adf$rubber_loss = RubberLoss(adf$slipAngle, adf$CPRESS, adf$CSLIP1)
write.table(adf, fe_new_files[iFe], sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
rubbertotal[iFe] = [adf$rubber_loss]
}
RubberLoss = function(cslip, cpres, cspeed)  0.13 +
0.01*((slip_angle-3.00)/0.58) +
0.05*((surface_pressure-4.43)/0.95) +
0.04*((speed-9.82)/3.19)
fe_model_files = dir("/home/karianjahi/FE_MODEL", pattern = "odb.txt", full.names = TRUE)
fe_new_files = gsub(".odb.txt", "_rubber_loss.csv", fe_model_files)
Dat = lapply(fe_model_files, function(x) read.delim(x, header = TRUE, sep = ","))
RubberLoss = function(cslip, cpres, cspeed)  0.13 +
0.01*((slip_angle-3.00)/0.58) +
0.05*((surface_pressure-4.43)/0.95) +
0.04*((speed-9.82)/3.19)
rubbertotal = NULL
for(iFe in seq_along(fe_model_files)){
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP2/adf$CSLIP1)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
adf$rubber_loss = RubberLoss(adf$slipAngle, adf$CPRESS, adf$CSLIP1)
write.table(adf, fe_new_files[iFe], sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
rubbertotal[iFe] = adf$rubber_loss
}
fe_model_files = dir("/home/karianjahi/FE_MODEL", pattern = "odb.txt", full.names = TRUE)
fe_new_files = gsub(".odb.txt", "_rubber_loss.csv", fe_model_files)
Dat = lapply(fe_model_files, function(x) read.delim(x, header = TRUE, sep = ","))
RubberLoss = function(cslip, cpres, cspeed)  0.13 +
0.01*((cslip-3.00)/0.58) +
0.05*((cpres-4.43)/0.95) +
0.04*((cspeed-9.82)/3.19)
rubbertotal = NULL
for(iFe in seq_along(fe_model_files)){
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP2/adf$CSLIP1)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
adf$rubber_loss = RubberLoss(adf$slipAngle, adf$CPRESS, adf$CSLIP1)
write.table(adf, fe_new_files[iFe], sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
rubbertotal[iFe] = adf$rubber_loss
}
warnings()
fe_model_files = dir("/home/karianjahi/FE_MODEL", pattern = "odb.txt", full.names = TRUE)
fe_new_files = gsub(".odb.txt", "_rubber_loss.csv", fe_model_files)
Dat = lapply(fe_model_files, function(x) read.delim(x, header = TRUE, sep = ","))
RubberLoss = function(cslip, cpres, cspeed)  0.13 +
0.01*((cslip-3.00)/0.58) +
0.05*((cpres-4.43)/0.95) +
0.04*((cspeed-9.82)/3.19)
rubbertotal = NULL
for(iFe in seq_along(fe_model_files)){
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP2/adf$CSLIP1)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
adf$rubber_loss = RubberLoss(adf$slipAngle, adf$CPRESS, adf$CSLIP1)
write.table(adf, fe_new_files[iFe], sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
rubbertotal[[iFe]] = adf$rubber_loss
}
rubbertotal
fe_model_files = dir("/home/karianjahi/FE_MODEL", pattern = "odb.txt", full.names = TRUE)
fe_new_files = gsub(".odb.txt", "_rubber_loss.csv", fe_model_files)
Dat = lapply(fe_model_files, function(x) read.delim(x, header = TRUE, sep = ","))
RubberLoss = function(cslip, cpres, cspeed)  0.13 +
0.01*((cslip-3.00)/0.58) +
0.05*((cpres-4.43)/0.95) +
0.04*((cspeed-9.82)/3.19)
rubbertotal = NULL
for(iFe in seq_along(fe_model_files)){
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP2/adf$CSLIP1)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
adf$rubber_loss = RubberLoss(adf$slipAngle, adf$CPRESS, adf$CSLIP1)
write.table(adf, fe_new_files[iFe], sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
rubbertotal[[iFe]] = sum(adf$rubber_loss)
}
rubbertotal
adf$rubber_loss
rubbertotal
fe_model_files = dir("/home/karianjahi/FE_MODEL", pattern = "odb.txt", full.names = TRUE)
fe_new_files = gsub(".odb.txt", "_rubber_loss.csv", fe_model_files)
Dat = lapply(fe_model_files, function(x) read.delim(x, header = TRUE, sep = ","))
RubberLoss = function(cslip, cpres, cspeed)  0.13 +
0.01*((cslip+3.00)/0.58) +
0.05*((cpres+4.43)/0.95) +
0.04*((cspeed+9.82)/3.19)
rubbertotal = NULL
for(iFe in seq_along(fe_model_files)){
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP2/adf$CSLIP1)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
adf$rubber_loss = RubberLoss(adf$slipAngle, adf$CPRESS, adf$CSLIP1)
write.table(adf, fe_new_files[iFe], sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
rubbertotal[[iFe]] = sum(adf$rubber_loss)
}
rubbertotal
adf
hist(adf$CSLIP1)
hist(adf$CSLIP2)
hist(adf$CSLIP1)
head(adf)
plot(adf$slipAngle)
plot(adf$slipAngle)
y = 0.01*((adf$slipAngle-3.00)/0.58)
plot(adf$slipAngle, y, type = "l")
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP1/adf$CSLIP2)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
y = 0.01*((adf$slipAngle-3.00)/0.58)
plot(adf$slipAngle, y, type = "l")
hist(adf$slipAngle)
iFe
iFe = 8
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP1/adf$CSLIP2)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
y = 0.01*((adf$slipAngle-3.00)/0.58)
plot(adf$slipAngle, y, type = "l")
hist(adf$slipAngle)
iFe = 3
or(iFe in seq_along(fe_model_files)){
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP1/adf$CSLIP2)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
y = 0.01*((adf$slipAngle-3.00)/0.58)
adf = Dat[[iFe]]
slip_angle = atan(adf$CSLIP1/adf$CSLIP2)
slip_angle = abs(ifelse(is.nan(slip_angle), 0, slip_angle))
adf$slipAngle = slip_angle
y = 0.01*((adf$slipAngle-3.00)/0.58)
plot(adf$slipAngle, y, type = "l")
hist(adf$slipAngle)
"You can't come here. Can you deny this!"
q()
"africans reportedly being forced into quarantine regardless of their recent travel history. Africans, Chinese, Europeans and so on"
"And they have to do this for the whole community. Abide by the rules and regulations"
"Why African ambassadors have raised concerns. With due respect Victor. Chinese government denies discrimination. These are actually Chinese citizens coming back to China. They are being asked not to come back to Beijing"
59.99*2
23649/582594
23649/120450*100
(2139800697+7377)-36362
(2139800697+7377)-8353180571
(2139800697+7377) + 6213372497
kenyan_serial_number = 2139800697
bank_pin = 7377
pin
pin = kenyan_serial_number + bank_pin - 2139771712
pin
puk = kenyan_serial_number + bank_pin + 6213372497
puk
dat = readLines("~/contributions_fims.txt")
dat
dat = read.delim("~/contributions_fims.txt", sep = "-")
dat
dat = read.delim("~/contributions_fims.txt", sep = "-", header = FALSE)
dat$V2
sum(dat$V2)
as.numeric(dat$V2)
dat$V2
as.character(dat$V2)
strsplit(as.character(dat$V2), "✅")
unlist(strsplit(as.character(dat$V2), "✅"))
gsub(",", "", unlist(strsplit(as.character(dat$V2), "✅")))
gsub("K", "", gsub(",", "", unlist(strsplit(as.character(dat$V2), "✅"))))
gsub(" ", "", gsub("K", "", gsub(",", "", unlist(strsplit(as.character(dat$V2), "✅")))))
gsub("k", "", gsub(" ", "", gsub("K", "", gsub(",", "", unlist(strsplit(as.character(dat$V2), "✅"))))))
as.numeric(gsub("k", "", gsub(" ", "", gsub("K", "", gsub(",", "", unlist(strsplit(as.character(dat$V2), "✅")))))))
gsub("k", "", gsub(" ", "", gsub("K", "", gsub(",", "", unlist(strsplit(as.character(dat$V2), "✅"))))))
gsub("c", "", gsub("k", "", gsub(" ", "", gsub("K", "", gsub(",", "", unlist(strsplit(as.character(dat$V2), "✅")))))))
as.numeric(gsub("c", "", gsub("k", "", gsub(" ", "", gsub("K", "", gsub(",", "", unlist(strsplit(as.character(dat$V2), "✅"))))))))
sum(as.numeric(gsub("c", "", gsub("k", "", gsub(" ", "", gsub("K", "", gsub(",", "", unlist(strsplit(as.character(dat$V2), "✅")))))))))
180+50
getwd()
setwd("~/Downloads/my_expenses/")
cat(paste0("\n\nRun the script as Rscript 20200216_expenses_function.R mmm yyyy nnnn \nwhere mmm is month abbreviation, yyyy is year in full and nnnn is salary in 4 digits\nE.g Rscript 20200216_expenses_function.R Sep 2015 3400\n\n"))
inputs = commandArgs(trailingOnly = TRUE)
SavingsExpenses = function(filename = "20200201_daily_expenses.txt",
output_file = "20200201_daily_expenses_out.txt",
year_and_month = 202005,
total_monthly_expenses = TRUE,
total_expenses = TRUE){
# Read income file
income_dat = read.delim("update_income.txt", sep = ",", header = FALSE, stringsAsFactors = FALSE)
# read the file
data = read.csv(filename, stringsAsFactors = FALSE)
# Take the date
dates = data$date
# Take time
time = as.character(data$time)
time_splits = strsplit(time, "\\.")
# Some handy custom functions to take care of hour and minute
add0_b4 = function(x) ifelse(nchar(x) < 2, paste0("0", x), x)
add0_af = function(x) ifelse(nchar(x) < 2, paste0(x, "0"), x)
whatNA = function(x) ifelse(is.na(x), "00", add0_af(x))
# Get the hour
hour = add0_b4(unlist(lapply(time_splits, function(x) x[1])))
# Get minute
minute = whatNA(unlist(lapply(time_splits, function(x) x[2])))
# Hour minute
hrmin = paste0(hour, ":", minute)
# Date and time
nice_dtime = strptime(paste0(dates, " ", hrmin), format = "%d.%m.%Y %H:%M", tz = "EAT")
# Our final table
final_table = data.frame(time = nice_dtime, desc = data$description, amt = data$amount)
# Order the table by date and time
final_table = final_table[order(final_table$time), ]
# Take year and month from table to mimick request
year_month_from_table = format(final_table$time, "%Y%m")
# Get row indices corresponding to year and month of request
if(nchar(year_and_month) < 6){
stop(paste0("format of year_and_month should be yyyymm"))
} else {
# month table
month_table = final_table[grepl(as.character(year_and_month), year_month_from_table), ]
# What is the month
mon = unique(format(month_table$time, "%b"))
year = unique(format(month_table$time, "%Y"))
# monthly_expenses
monthly_expenses = sum(month_table$amt)
# income mons
income_mons = format(as.Date(income_dat$V1, "%Y%b%d"), "%m")
# Which mon is requested
mon_req = substr(year_and_month, 5, 6)
# Monthly savings
monthly_savings = income - monthly_expenses
# Months paid
months_paid = unique(format(final_table$time, "%Y-%m"))
# No. of months paid
nmon = length(income_dat$V1)
# Total income
total_income = sum(income_dat$V2)
# Total savings
total_savings = total_income - sum(final_table$amt)
# Total expenses
total_expenses = sum(final_table$amt)
#cat(paste0("\nAverage Total Income so far = Eur ", format(total_income, big.mark = ","), "\n"))
cat(paste0("\nAverage Total Expenses so far = Eur ", format(total_expenses, big.mark = ","), "\n"))
#cat(paste0("\nMonthly income for the month of ", mon, ", ",  year, " = Eur ", format(income, big.mark = ","), "\n"))
cat(paste0("\nMonthly expenses for the month of ", mon, ", ",  year, " = Eur ", format(monthly_expenses, big.mark = ","), "\n"))
cat(paste0("\nMonthly savings for the month of ", mon, ", ",  year, " = Eur ", format(monthly_savings, big.mark = ","), "\n"))
cat(paste0("\nTotal Savings for the last ", nmon, " months = Eur ", format(total_savings, big.mark = ","), "\n"))
# Save output file
table2save = data.frame(time = format(final_table[, 1], "%Y-%b-%m %H:%M"), final_table[, c(2, 3)])
write.table(x = table2save, file = output_file, sep = ",", row.names = FALSE, quote = FALSE)
}
}
if(length(inputs) > 0) {
year_and_month = as.numeric(format(as.Date(paste0(inputs[1], inputs[2], "01"), format = "%b%Y%d"), "%Y%m"))
income = as.numeric(inputs[3])
SavingsExpenses(year_and_month = year_and_month, income = income)
} else {
SavingsExpenses()
}
paste0("2010", mabb, "01")
mabb = "srs"
paste0("2010", mabb, "01")
?tryCatch
as.Date(paste0("2010", mabb, "01"), format = "%Y%b%d")
csf = c(NA, NA, NA)
all(is.na(csf))
csf = c(NA, NA, NA, 34)
all(is.na(csf))
as.Date(paste0("2002", "sep", "01"), format = "%Y%b%d")
mon = Sys.Date()
mon
mon = format(Sys.Date(), "%b")
mon
try(as.numeric("49s4"))
try(as.numeric("49s4"), silent = TRUE)
try(as.numeric("49s4"), silent = TRUE)
as.numeric("42d4")
try(jfsr, silent = T)
is.letter
is.numeric(82)
is.numeric(b)
is.numeric("4ds")
as.numeric("d")
try(as.numeric("d"), silent = TRUE)
yearnum = function(year){
out = tryCatch(
{
as.numeric(year)
},
error = function(cond){
return("error")
},
warning = function(cond){
return("warning")
},
finally = {
return("Let's go")
}
)
return(out)
}
yearnum("34s3")
yearnum = function(year){
out = tryCatch(
{
as.numeric(year)
},
error = function(cond){
return("error")
},
warning = function(cond){
return("warning")
},
finally = {
current_year = format(Sys.Date(), "%Y")
return(current_year)
}
)
return(out)
}
yearnum("34s3")
monfun = function(month){
out = tryCatch(
{
as.Date(paste0("2020", month, "01"), "%Y%b%d")
},
warning = function(cond){
return("warning")
},
finally = {
current_month = format(Sys.Date(), "%b")
return(current_month)
}
)
return(out)
}
monfun("May")
monfun = function(month){
out = tryCatch(
{
as.Date(paste0("2020", month, "01"), "%Y%b%d")
},
warning = function(cond){
return("warning")
}
)
return(out)
}
monfun("May")
monfun("Mayr")
yearnum = function(year){
out = tryCatch(
{
as.numeric(year)
},
error = function(cond){
return("error")
},
warning = function(cond){
return("warning")
}
)
return(out)
}
yearnum(3422)
yearnum(3422f)
yearnum("3422f")
monfun("Mayr")
monfun("494")
monfun("3427")
yearnum("342ds")
income_file = read.delim("update_income.txt", sep = ",", header = FALSE, stringsAsFactors = FALSE)
income_data = read.delim("update_income.txt", sep = ",", header = FALSE, stringsAsFactors = FALSE)
valid_dates = income_data$V1
valid_dates
valid_dates = as.Date(income_data$V1, format = "%Y%b%m")
valid_dates
valid_dates = as.Date(income_data$V1, format = "%Y%b%d")
valid_dates
valid_dates = as.numeric(as.Date(income_data$V1, format = "%Y%b%d"))
valid_dates
valid_dates = format(as.Date(income_data$V1, format = "%Y%b%d"), "%Y%b")
valid_dates
ym = paste0(current_year, current_month)
